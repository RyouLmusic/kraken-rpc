注释
@ScanInterface (暴露接口给消费者)

将结果缓存到消费端本地，保存一段时间之后再失效
RpcService注解，定义在服务接口的实现类上，可以让框架通过这个注解找到服务实现类。
@RpcService(value = HelloService.class, version = "sample.hello2")

在watch包里面 进行监控：每次远程调用，服务注册。。。等等


linux的环境变量：
/etc/profile
里面的export PATH

source  刷新操作




客户端的使用场景：
1. 创建连接
2. 发送数据，并等待响应
3. 关闭连接(实现长连接？？)

服务端的使用场景：
1. 启动，监听端口
2. 接受请求 (RequestHandler: 处理网络请求)
3. 关闭


一次简单的 RPC 调用可以分为以下几个步骤：

（1）服务提供者启动后主动向服务注册中心注册机器ip、端口以及提供的服务列表；

（2）服务消费者启动时向服务注册中心获取服务提供方地址列表，在本地缓存一份；

（3）服务消费者通过本地调用的方式调用服务，调用模块收到请求后通过负载均衡策略选取合适的远程服务地址；

（4）协议模块负责将方法、入参等信息序列化(编码)成能够进行网络传输的消息体，并将消息通过网络发送给服务端；

（5）服务端收到消息后进行解码(反序列化操作)。

（6）根据解码结果调用本地的服务进行相关处理；

（7）服务端将处理返回的结果进行序列化（编码），并将结果通过网络发送至服务消费者；

（8）服务消费者收到消息后进行解码最终得到结果；


虚拟机安装Zookeeper：https://www.cnblogs.com/haoee/p/14657512.html
启动：zkServer.sh start /usr/local/zookeeper3.6.3/conf/zoo1.cfg
集群：/home/zookeeper/zk1/bin/zkServer.sh status

，注册中心必须提供以下最基本的API，例如：

服务注册接口：服务提供者通过调用服务注册接口来完成服务注册。
服务反注册接口：服务提供者通过调用服务反注册接口来完成服务注销。
心跳汇报接口：服务提供者通过调用心跳汇报接口完成节点存活状态上报。
服务订阅接口：服务消费者通过调用服务订阅接口完成服务订阅，获取可用的服务提供者节点列表。
服务变更查询接口：服务消费者通过调用服务变更查询接口，获取最新的可用服务节点列表。
除此之外，为了便于管理，注册中心还必须提供一些后台管理的API，例如：

服务查询接口：查询注册中心当前注册了哪些服务信息。
服务修改接口：修改注册中心中某一服务的信息。


还必须具备对服务提供者节点的健康状态检测功能，这样才能保证注册中心里保存的服务节点都是可用的。

还是以ZooKeeper为例，它是基于ZooKeeper客户端和服务端的长连接和会话超时控制机制，来实现服务健康状态检测的。
服务状态变更通知

应用内注册与发现：注册中心提供服务端和客户端的SDK，业务应用通过引入注册中心提供的SDK，通过SDK与注册中心交互，来实现服务的注册和发现。
TODO 白名单机制
TODO：注册中心后面可以加上SPI机制(可以用户自定义使用其他中间件作为注册中心)
TODO: 服务限流： https://blog.csdn.net/m0_37135421/article/details/104476959
在dubbo中同样提供了服务限流的两种方法：直接限流和间接限流。直接限流，通过对连接的数量直接限制来达到限流的目的，超时限制则会让消费者等待，直到等待超时，或者获取到服务。间接限流，通过一些非连接数量设置的间接手段来达到限流的目的
TODO: 集群容错
TODO: 修改配置读取(不用每次读取都通过cglib，有存储，但是热修改也要支持)，加强性能(client连接的线程池池化处理，还有client连接的线程安全问题弱化，以加强性能)
TODO: 缓存机制(不需要每次都去 zk上面获取内容，通过zk的监听机制，有服务器下线的时候，删除缓存) 要不是ZK的话？？

非spring版本：通过写一个接口，利用这个接口，可以将需要进行注册的服务类Service进行注册到 zk中
消费者的话，就通过类型的接口，在消费者端实现此接口，进行订阅这些接口的实现地址，不需要扫描包，手动将HelloService.class丢给接口
模式的定义与特点
模板方法（Template Method）模式的定义如下：定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，
使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。它是一种类行为型模式。类似代理模式： 进行实现



spring 版本： 通过注解进行Scanner, 扫描有注解@HRpcServie的类，进行调用非spring版本的进行实现



